/**
 * Build a tiny local SVG sprite from Simple Icons.
 * Output: assets/icons-tech.svg
 * CSP-safe: all icons self-hosted, used via <use href="#id">
 */
import fs from 'node:fs';
import path from 'node:path';
import * as simpleIcons from 'simple-icons';

const ROOT = path.resolve(process.cwd());
const ASSETS_DIR = path.join(ROOT, 'assets');
const OUT = path.join(ASSETS_DIR, 'icons-tech.svg');

// Ensure assets directory exists
if (!fs.existsSync(ASSETS_DIR)) {
  fs.mkdirSync(ASSETS_DIR, { recursive: true });
}

// Slugs to include (simple-icons names). Adjust freely.
const WANTED = [
  'laravel',
  'react',
  'typescript',
  'javascript',
  'wordpress',
  'angular',
  'nodedotjs',     // Node.js in Simple Icons
  'nextdotjs',     // Next.js in Simple Icons
  'tailwindcss',
  'vuedotjs',      // Vue.js
  'nuxtdotjs'
];

// Build <symbol> entries with currentColor fill
const symbols = [];
for (const slug of WANTED) {
  const key = Object.keys(simpleIcons).find(k => {
    const v = simpleIcons[k];
    return v && v.slug === slug;
  });
  if (!key) {
    console.warn(`[icons] Missing in simple-icons: ${slug}`);
    continue;
  }
  const { title, path: d, hex } = simpleIcons[key];
  // Use 24 viewBox to match typical icon size; Simple Icons viewBox is 24.
  symbols.push(
    `<symbol id="si-${slug}" viewBox="0 0 24 24" data-title="${title}" data-hex="${hex}">
      <path d="${d}" fill="currentColor"/>
    </symbol>`
  );
}

const sprite = `<!-- generated by scripts/build-icons.mjs -->
<svg xmlns="http://www.w3.org/2000/svg" style="display:none">
${symbols.join('\n')}
</svg>
`;

fs.writeFileSync(OUT, sprite, 'utf8');
console.log(`[icons] Wrote ${OUT} with ${symbols.length} symbols`);